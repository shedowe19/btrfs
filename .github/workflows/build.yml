name: build
on: [push, workflow_dispatch]

env:
  # Nur wenn du PATH wirklich global überschreiben willst – sonst weglassen.
  PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/etc/eselect/wine/bin

jobs:
  cmake:
    runs-on: [self-hosted, msvc-wine]

    # Container korrekt angeben:
    container:
      image: madduci/docker-wine-msvc:17.8-2022   # <-- dein Image hier
      volumes:
        - /var/run/pcscd/pcscd.comm:/var/run/pcscd/pcscd.comm

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: SHORT_SHA setzen
        run: echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build-Verzeichnisse
        run: |
          mkdir -p build/debug/{amd64,x86,aarch64,arm}
          mkdir -p build/release/{amd64,x86,aarch64,arm}
          mkdir -p build/pdb/{debug,release}/{amd64,x86,aarch64,arm}

      - name: CMake Debug Builds
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake  -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/amd64  && cmake --build build/debug/amd64  --parallel `nproc`
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake    -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/x86    && cmake --build build/debug/x86    --parallel `nproc`
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/aarch64 && cmake --build build/debug/aarch64 --parallel `nproc`
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake  -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/arm    && cmake --build build/debug/arm    --parallel `nproc`

      - name: CMake Release (RelWithDebInfo)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake  -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/amd64  && cmake --build build/release/amd64  --parallel `nproc`
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake    -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/x86    && cmake --build build/release/x86    --parallel `nproc`
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/aarch64 && cmake --build build/release/aarch64 --parallel `nproc`
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake  -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/arm    && cmake --build build/release/arm    --parallel `nproc`

      - name: PDB einsammeln
        run: |
          mv build/debug/amd64/*.pdb     build/pdb/debug/amd64/     || true
          mv build/debug/x86/*.pdb       build/pdb/debug/x86/       || true
          mv build/debug/aarch64/*.pdb   build/pdb/debug/aarch64/   || true
          mv build/debug/arm/*.pdb       build/pdb/debug/arm/       || true
          mv build/release/amd64/*.pdb   build/pdb/release/amd64/   || true
          mv build/release/x86/*.pdb     build/pdb/release/x86/     || true
          mv build/release/aarch64/*.pdb build/pdb/release/aarch64/ || true
          mv build/release/arm/*.pdb     build/pdb/release/arm/     || true

      - name: INF kopieren
        run: |
          cp src/{btrfs,btrfs-vol}.inf build/debug/
          cp src/{btrfs,btrfs-vol}.inf build/release/

      - name: INF stempeln
        run: |
          stampinf -f build/debug/btrfs.inf -d \* -v \*
          stampinf -f build/debug/btrfs-vol.inf -d \* -v \*
          stampinf -f build/release/btrfs.inf -d \* -v \*
          stampinf -f build/release/btrfs-vol.inf -d \*

      - name: Kataloge erzeugen
        run: |
          (cd build/debug   && makecat ../../src/btrfs.cdf)
          (cd build/release && makecat ../../src/btrfs.cdf)

      - name: Zertifikatskette speichern
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}
        run: echo "${CERTIFICATE}" > codesigning.crt

      - name: CAT signieren (PKCS#11)
        env:
          PKCS11CERT: ${{ secrets.PKCS11CERT }}
          PKCS11KEY:  ${{ secrets.PKCS11KEY }}
        run: |
          for i in build/{debug,release}/btrfs.cat; do
            osslsigncode sign \
              -pkcs11module /usr/lib64/libcrypto3PKCS.so \
              -pkcs11cert "${PKCS11CERT}" -key "${PKCS11KEY}" \
              -certs codesigning.crt \
              -t http://timestamp.digicert.com \
              -in "$i" -out tmp && mv tmp "$i"
          done

      - name: BINs/DLLs signieren (PKCS#11)
        env:
          PKCS11CERT: ${{ secrets.PKCS11CERT }}
          PKCS11KEY:  ${{ secrets.PKCS11KEY }}
        run: |
          for i in build/{debug,release}/{amd64,x86,aarch64,arm}/{btrfs.sys,mkbtrfs.exe,shellbtrfs.dll,ubtrfs.dll}; do
            [ -f "$i" ] || continue
            osslsigncode sign \
              -pkcs11module /usr/lib64/libcrypto3PKCS.so \
              -pkcs11cert "${PKCS11CERT}" -key "${PKCS11KEY}" \
              -certs codesigning.crt \
              -t http://timestamp.digicert.com -ph \
              -in "$i" -out tmp && mv tmp "$i"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}
          overwrite: true
          path: |
            build/**/btrfs.sys
            build/**/mkbtrfs.exe
            build/**/shellbtrfs.dll
            build/**/ubtrfs.dll
            build/**/*.inf
            build/**/*.cat
            build/pdb
