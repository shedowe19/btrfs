name: build
on: [push, workflow_dispatch]

jobs:
  cmake:
    runs-on: windows-latest

    # Zentrale Umgebungsvariablen
    env:
      SDK_VERSION: "26100"
      WDK_ID: "Microsoft.WindowsWDK.10.0.26100"
      # Secrets in env spiegeln → dann in if: env.* benutzen (kein "secrets" direkt!)
      PFX_BASE64: ${{ secrets.PFX_BASE64 }}
      PFX_PASS:   ${{ secrets.PFX_PASS }}

    steps:
      - name: Checkout (inkl. Submodule)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: SHORT_SHA setzen
        shell: pwsh
        run: echo "SHORT_SHA=$(${env:GITHUB_SHA}.Substring(0,8))" >> $env:GITHUB_ENV

      - name: Windows SDK installieren
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.4
        with:
          sdk-version: ${{ env.SDK_VERSION }}

      - name: WDK installieren (winget, mit Retry)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          winget source update
          function Install-Winget {
            param([string]$Id)
            for($i=1;$i -le 3;$i++){
              try {
                winget install --source winget --exact --id $Id `
                  --accept-source-agreements --accept-package-agreements --silent --verbose-logs
                return
              } catch {
                Start-Sleep -Seconds (10*$i)
                if($i -eq 3){ throw }
              }
            }
          }
          Install-Winget -Id $env:WDK_ID

      - name: Ninja sicherstellen (optional)
        shell: pwsh
        run: |
          if (-not (Get-Command ninja.exe -EA SilentlyContinue)) {
            choco install ninja --no-progress -y
          }

      - name: Build-Ordner
        shell: pwsh
        run: |
          New-Item -Force -ItemType Directory -Path build/debug/{amd64,x86,aarch64,arm} | Out-Null
          New-Item -Force -ItemType Directory -Path build/release/{amd64,x86,aarch64,arm} | Out-Null
          New-Item -Force -ItemType Directory -Path build/pdb/{debug,release}/{amd64,x86,aarch64,arm} | Out-Null

      # Generator wählen (Ninja bevorzugt, VS-Fallback inkl. --config)
      - name: Generator wählen
        id: gen
        shell: pwsh
        run: |
          $gen = "Ninja"
          if (-not (Get-Command ninja.exe -EA SilentlyContinue)) { $gen = "Visual Studio 17 2022" }
          $cfgDbg = ""
          $cfgRel = ""
          if ($gen -eq "Visual Studio 17 2022") {
            $cfgDbg = "--config Debug"
            $cfgRel = "--config RelWithDebInfo"
          }
          "GEN=$gen"     | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "CFGDBG=$cfgDbg" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "CFGREL=$cfgRel" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      # ---- AMD64 ----
      - name: MSVC Env (amd64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
      - name: CMake (amd64)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake   -DCMAKE_BUILD_TYPE=Debug          -DWITH_TEST=OFF -S . -B build/debug/amd64
          cmake --build build/debug/amd64   --parallel $P $CFGDBG
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake   -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/amd64
          cmake --build build/release/amd64 --parallel $P $CFGREL

      # ---- x86 ----
      - name: MSVC Env (amd64_x86)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_x86
      - name: CMake (x86)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake     -DCMAKE_BUILD_TYPE=Debug          -DWITH_TEST=OFF -S . -B build/debug/x86
          cmake --build build/debug/x86     --parallel $P $CFGDBG
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake     -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/x86
          cmake --build build/release/x86   --parallel $P $CFGREL

      # ---- ARM64 ----
      - name: MSVC Env (amd64_arm64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64
      - name: CMake (arm64)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=Debug          -DWITH_TEST=OFF -S . -B build/debug/aarch64
          cmake --build build/debug/aarch64 --parallel $P $CFGDBG
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/aarch64
          cmake --build build/release/aarch64 --parallel $P $CFGREL

      # ---- ARMv7 ----
      - name: MSVC Env (amd64_arm)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm
      - name: CMake (armv7)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake   -DCMAKE_BUILD_TYPE=Debug          -DWITH_TEST=OFF -S . -B build/debug/arm
          cmake --build build/debug/arm     --parallel $P $CFGDBG
          cmake -G "$G" -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake   -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/arm
          cmake --build build/release/arm   --parallel $P $CFGREL

      - name: PDB einsammeln
        shell: pwsh
        run: |
          Get-ChildItem build/debug/amd64/*.pdb     -EA SilentlyContinue | Move-Item -Dest build/pdb/debug/amd64/     -Force
          Get-ChildItem build/debug/x86/*.pdb       -EA SilentlyContinue | Move-Item -Dest build/pdb/debug/x86/       -Force
          Get-ChildItem build/debug/aarch64/*.pdb   -EA SilentlyContinue | Move-Item -Dest build/pdb/debug/aarch64/   -Force
          Get-ChildItem build/debug/arm/*.pdb       -EA SilentlyContinue | Move-Item -Dest build/pdb/debug/arm/       -Force
          Get-ChildItem build/release/amd64/*.pdb   -EA SilentlyContinue | Move-Item -Dest build/pdb/release/amd64/   -Force
          Get-ChildItem build/release/x86/*.pdb     -EA SilentlyContinue | Move-Item -Dest build/pdb/release/x86/     -Force
          Get-ChildItem build/release/aarch64/*.pdb -EA SilentlyContinue | Move-Item -Dest build/pdb/release/aarch64/ -Force
          Get-ChildItem build/release/arm/*.pdb     -EA SilentlyContinue | Move-Item -Dest build/pdb/release/arm/     -Force

      - name: INF kopieren
        shell: pwsh
        run: |
          if(-not (Test-Path src/btrfs.inf)){ throw "src/btrfs.inf fehlt" }
          if(-not (Test-Path src/btrfs-vol.inf)){ throw "src/btrfs-vol.inf fehlt" }
          Copy-Item src/btrfs.inf,src/btrfs-vol.inf build/debug/   -Force
          Copy-Item src/btrfs.inf,src/btrfs-vol.inf build/release/ -Force

      - name: Tools finden (stampinf/makecat/signtool)
        id: tools
        shell: pwsh
        run: |
          $kits = "C:\Program Files (x86)\Windows Kits\10\bin"
          $makecat  = Get-ChildItem $kits -Recurse -Filter makecat.exe  -EA SilentlyContinue | Select-Object -First 1
          $stampinf = Get-ChildItem $kits -Recurse -Filter stampinf.exe -EA SilentlyContinue | Select-Object -First 1
          $signtool = Get-ChildItem $kits -Recurse -Filter signtool.exe -EA SilentlyContinue | Select-Object -First 1
          if(-not $makecat){  throw "makecat.exe nicht gefunden (SDK fehlt?)" }
          if(-not $stampinf){ throw "stampinf.exe nicht gefunden (WDK fehlt?)" }
          if(-not $signtool){ throw "signtool.exe nicht gefunden (SDK fehlt?)" }
          "MAKECAT=$($makecat.FullName)"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "STAMPINF=$($stampinf.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "SIGNTOOL=$($signtool.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: INF stempeln
        shell: pwsh
        run: |
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/debug/btrfs.inf       -d '*' -v '*'
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/debug/btrfs-vol.inf   -d '*' -v '*'
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/release/btrfs.inf     -d '*' -v '*'
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/release/btrfs-vol.inf -d '*' -v '*'

      - name: Kataloge erzeugen (makecat)
        shell: pwsh
        run: |
          Push-Location build/debug   ; & '${{ steps.tools.outputs.MAKECAT }}' ..\..\src\btrfs.cdf ; Pop-Location
          Push-Location build/release ; & '${{ steps.tools.outputs.MAKECAT }}' ..\..\src\btrfs.cdf ; Pop-Location

      # --- Signieren NUR wenn Secrets vorhanden (über env geprüft) ---
      - name: PFX schreiben
        if: ${{ env.PFX_BASE64 != '' && env.PFX_PASS != '' }}
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes("codesigning.pfx",[Convert]::FromBase64String($env:PFX_BASE64))

      - name: CAT signieren
        if: ${{ env.PFX_BASE64 != '' && env.PFX_PASS != '' }}
        shell: pwsh
        run: |
          Get-ChildItem build -Recurse -Filter btrfs.cat | ForEach-Object {
            & '${{ steps.tools.outputs.SIGNTOOL }}' sign `
              /fd sha256 /td sha256 /tr http://timestamp.digicert.com `
              /f codesigning.pfx /p "$env:PFX_PASS" `
              $_.FullName
          }

      - name: BINs/DLLs signieren (mit /ph)
        if: ${{ env.PFX_BASE64 != '' && env.PFX_PASS != '' }}
        shell: pwsh
        run: |
          $targets = @("btrfs.sys","mkbtrfs.exe","shellbtrfs.dll","ubtrfs.dll")
          foreach($t in $targets){
            Get-ChildItem build -Recurse -Filter $t | ForEach-Object {
              & '${{ steps.tools.outputs.SIGNTOOL }}' sign `
                /fd sha256 /td sha256 /tr http://timestamp.digicert.com /ph `
                /f codesigning.pfx /p "$env:PFX_PASS" `
                $_.FullName
            }
          }

      - name: Artefakte hochladen
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}
          overwrite: true
          path: |
            build/**/btrfs.sys
            build/**/mkbtrfs.exe
            build/**/shellbtrfs.dll
            build/**/ubtrfs.dll
            build/**/*.inf
            build/**/*.cat
            build/pdb
