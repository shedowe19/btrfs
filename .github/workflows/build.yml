name: build
on: [push, workflow_dispatch]

jobs:
  cmake:
    runs-on: windows-latest

    env:
      SDK_VERSION: "26100"
      WDK_ID: "Microsoft.WindowsWDK.10.0.26100"
      # Secrets in env spiegeln → in if: env.* verwenden
      PFX_BASE64: ${{ secrets.PFX_BASE64 }}
      PFX_PASS:   ${{ secrets.PFX_PASS }}

    steps:
      - name: Checkout (inkl. Submodule)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: SHORT_SHA setzen
        shell: pwsh
        run: echo "SHORT_SHA=$(${env:GITHUB_SHA}.Substring(0,8))" >> $env:GITHUB_ENV

      # Windows SDK (liefert u. a. makecat.exe & signtool.exe)
      - name: Windows SDK installieren
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.4
        with:
          sdk-version: ${{ env.SDK_VERSION }}

      # WDK (liefert stampinf.exe) – winget + einfacher Retry
      - name: WDK installieren (winget, mit Retry)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          winget source update
          function Install-Winget {
            param([string]$Id)
            for($i=1;$i -le 3;$i++){
              try {
                winget install --source winget --exact --id $Id `
                  --accept-source-agreements --accept-package-agreements --silent --verbose-logs
                return
              } catch {
                Start-Sleep -Seconds (10*$i)
                if($i -eq 3){ throw }
              }
            }
          }
          Install-Winget -Id $env:WDK_ID

      - name: Build-Ordner
        shell: pwsh
        run: |
          $arches  = @('amd64','x86','aarch64','arm')
          $configs = @('debug','release')
          foreach ($cfg in $configs) {
            foreach ($arch in $arches) {
              New-Item -ItemType Directory -Force -Path "build/$cfg/$arch" | Out-Null
            }
          }
          foreach ($cfg in $configs) {
            foreach ($arch in $arches) {
              New-Item -ItemType Directory -Force -Path "build/pdb/$cfg/$arch" | Out-Null
            }
          }

      # Shim-Header & km-Include-Pfad finden
      - name: Include-Shims + WDK km Pfad ermitteln
        id: inc
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          # 1) Shim für "crt/intrin.h" anlegen, der <intrin.h> inkludiert
          $shimRoot = Join-Path $pwd "build/include_shims"
          New-Item -ItemType Directory -Force -Path (Join-Path $shimRoot "crt") | Out-Null
          $shimFile = Join-Path $shimRoot "crt/intrin.h"
          Set-Content -Path $shimFile -Encoding ascii -NoNewline -Value "#pragma once`r`n#include <intrin.h>`r`n"

          # 2) Aktuellste Windows Kits Include-Version ermitteln
          $kitsInc = "C:\Program Files (x86)\Windows Kits\10\Include"
          if(-not (Test-Path $kitsInc)){ throw "Windows Kits Include-Verzeichnis nicht gefunden: $kitsInc" }
          $ver = (Get-ChildItem $kitsInc -Directory | Sort-Object Name -Descending | Select-Object -First 1).Name
          $km  = Join-Path (Join-Path $kitsInc $ver) "km"
          if(-not (Test-Path $km)){ throw "WDK km-Includes nicht gefunden: $km" }

          "SHIM_ROOT=$shimRoot" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "WDK_KM=$km"         | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      # Wir erzwingen bewusst den VS-Generator (stabil auf GitHub Runnern)
      - name: "Generator und Build-Flags setzen"
        id: gen
        shell: pwsh
        run: |
          "GEN=Visual Studio 17 2022" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "CFGDBG=--config Debug" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "CFGREL=--config RelWithDebInfo" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      # ---- AMD64 ----
      - name: CMake Configure+Build (amd64)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          $CFLAGS  = "/I`"${{ steps.inc.outputs.SHIM_ROOT }}`" /I`"${{ steps.inc.outputs.WDK_KM }}`""
          $CXXFLAGS= $CFLAGS
          cmake -G "$G" -A x64  -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/debug/amd64
          cmake --build build/debug/amd64   --parallel $P $CFGDBG
          cmake -G "$G" -A x64  -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/release/amd64
          cmake --build build/release/amd64 --parallel $P $CFGREL

      # ---- x86 ----
      - name: CMake Configure+Build (x86)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          $CFLAGS  = "/I`"${{ steps.inc.outputs.SHIM_ROOT }}`" /I`"${{ steps.inc.outputs.WDK_KM }}`""
          $CXXFLAGS= $CFLAGS
          cmake -G "$G" -A Win32 -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/debug/x86
          cmake --build build/debug/x86     --parallel $P $CFGDBG
          cmake -G "$G" -A Win32 -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/release/x86
          cmake --build build/release/x86   --parallel $P $CFGREL

      # ---- ARM64 ----
      - name: CMake Configure+Build (arm64)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          $CFLAGS  = "/I`"${{ steps.inc.outputs.SHIM_ROOT }}`" /I`"${{ steps.inc.outputs.WDK_KM }}`""
          $CXXFLAGS= $CFLAGS
          cmake -G "$G" -A ARM64 -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/debug/aarch64
          cmake --build build/debug/aarch64 --parallel $P $CFGDBG
          cmake -G "$G" -A ARM64 -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/release/aarch64
          cmake --build build/release/aarch64 --parallel $P $CFGREL

      # ---- ARMv7 (ARM32) ----
      - name: CMake Configure+Build (armv7)
        shell: pwsh
        run: |
          $G="${{ steps.gen.outputs.GEN }}"; $P=$env:NUMBER_OF_PROCESSORS
          $CFGDBG="${{ steps.gen.outputs.CFGDBG }}"; $CFGREL="${{ steps.gen.outputs.CFGREL }}"
          $CFLAGS  = "/I`"${{ steps.inc.outputs.SHIM_ROOT }}`" /I`"${{ steps.inc.outputs.WDK_KM }}`""
          $CXXFLAGS= $CFLAGS
          cmake -G "$G" -A ARM   -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/debug/arm
          cmake --build build/debug/arm     --parallel $P $CFGDBG
          cmake -G "$G" -A ARM   -DWITH_TEST=OFF -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -S . -B build/release/arm
          cmake --build build/release/arm   --parallel $P $CFGREL

      - name: PDB einsammeln (rekursiv)
        shell: pwsh
        run: |
          $map = @{
            "build/debug/amd64"     = "build/pdb/debug/amd64"
            "build/debug/x86"       = "build/pdb/debug/x86"
            "build/debug/aarch64"   = "build/pdb/debug/aarch64"
            "build/debug/arm"       = "build/pdb/debug/arm"
            "build/release/amd64"   = "build/pdb/release/amd64"
            "build/release/x86"     = "build/pdb/release/x86"
            "build/release/aarch64" = "build/pdb/release/aarch64"
            "build/release/arm"     = "build/pdb/release/arm"
          }
          foreach($k in $map.Keys){
            Get-ChildItem $k -Recurse -Filter *.pdb -EA SilentlyContinue | `
              Move-Item -Destination $map[$k] -Force
          }

      - name: INF kopieren
        shell: pwsh
        run: |
          if(-not (Test-Path src/btrfs.inf)){ throw "src/btrfs.inf fehlt" }
          if(-not (Test-Path src/btrfs-vol.inf)){ throw "src/btrfs-vol.inf fehlt" }
          Copy-Item src/btrfs.inf,src/btrfs-vol.inf build/debug/   -Force
          Copy-Item src/btrfs.inf,src/btrfs-vol.inf build/release/ -Force

      - name: Tools finden (stampinf/makecat/signtool)
        id: tools
        shell: pwsh
        run: |
          $kits = "C:\Program Files (x86)\Windows Kits\10\bin"
          $makecat  = Get-ChildItem $kits -Recurse -Filter makecat.exe  -EA SilentlyContinue | Select-Object -First 1
          $stampinf = Get-ChildItem $kits -Recurse -Filter stampinf.exe -EA SilentlyContinue | Select-Object -First 1
          $signtool = Get-ChildItem $kits -Recurse -Filter signtool.exe -EA SilentlyContinue | Select-Object -First 1
          if(-not $makecat){  throw "makecat.exe nicht gefunden (SDK fehlt?)" }
          if(-not $stampinf){ throw "stampinf.exe nicht gefunden (WDK fehlt?)" }
          if(-not $signtool){ throw "signtool.exe nicht gefunden (SDK fehlt?)" }
          "MAKECAT=$($makecat.FullName)"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "STAMPINF=$($stampinf.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "SIGNTOOL=$($signtool.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: INF stempeln
        shell: pwsh
        run: |
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/debug/btrfs.inf       -d '*' -v '*'
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/debug/btrfs-vol.inf   -d '*' -v '*'
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/release/btrfs.inf     -d '*' -v '*'
          & '${{ steps.tools.outputs.STAMPINF }}' -f build/release/btrfs-vol.inf -d '*' -v '*'

      - name: Kataloge erzeugen (makecat)
        shell: pwsh
        run: |
          Push-Location build/debug   ; & '${{ steps.tools.outputs.MAKECAT }}' ..\..\src\btrfs.cdf ; Pop-Location
          Push-Location build/release ; & '${{ steps.tools.outputs.MAKECAT }}' ..\..\src\btrfs.cdf ; Pop-Location

      # --- Signieren NUR wenn Secrets vorhanden ---
      - name: PFX schreiben
        if: ${{ env.PFX_BASE64 != '' && env.PFX_PASS != '' }}
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes("codesigning.pfx",[Convert]::FromBase64String($env:PFX_BASE64))

      - name: CAT signieren
        if: ${{ env.PFX_BASE64 != '' && env.PFX_PASS != '' }}
        shell: pwsh
        run: |
          Get-ChildItem build -Recurse -Filter btrfs.cat | ForEach-Object {
            & '${{ steps.tools.outputs.SIGNTOOL }}' sign `
              /fd sha256 /td sha256 /tr http://timestamp.digicert.com `
              /f codesigning.pfx /p "$env:PFX_PASS" `
              $_.FullName
          }

      - name: BINs/DLLs signieren (mit /ph)
        if: ${{ env.PFX_BASE64 != '' && env.PFX_PASS != '' }}
        shell: pwsh
        run: |
          $targets = @("btrfs.sys","mkbtrfs.exe","shellbtrfs.dll","ubtrfs.dll")
          foreach($t in $targets){
            Get-ChildItem build -Recurse -Filter $t | ForEach-Object {
              & '${{ steps.tools.outputs.SIGNTOOL }}' sign `
                /fd sha256 /td sha256 /tr http://timestamp.digicert.com /ph `
                /f codesigning.pfx /p "$env:PFX_PASS" `
                $_.FullName
            }
          }

      - name: Artefakte hochladen
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}
          overwrite: true
          path: |
            build/**/btrfs.sys
            build/**/mkbtrfs.exe
            build/**/shellbtrfs.dll
            build/**/ubtrfs.dll
            build/**/*.inf
            build/**/*.cat
            build/pdb
